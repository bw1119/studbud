'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PREFIX = '';
function setPrefix(prefix) {
  PREFIX = prefix;
  return PREFIX;
}
function getPrefixedKey(key, options) {
  if ((options == null ? void 0 : options.noPrefix) === true) {
    return key;
  } else {
    return "" + PREFIX + key;
  }
}
function hasPrefix() {
  return PREFIX.length > 0;
}
function getPrefix() {
  return PREFIX;
}

function set(key, value, options) {
  var query_key = getPrefixedKey(key, options);

  try {
    localStorage.setItem(query_key, JSON.stringify({
      data: value
    }));
  } catch (e) {
    if (console) {
      console.warn("Lockr didn't successfully save the '{\"" + key + "\": \"" + value + "\"}' pair, because the localStorage is full.");
    }
  }
}

function smembers(key, options) {
  var queryKey = getPrefixedKey(key, options);
  var value;
  var localValue = localStorage.getItem(queryKey);

  if (localValue !== null) {
    value = JSON.parse(localValue);
  } else {
    value = null;
  }

  return value && value.data ? value.data : [];
}

function sadd(key, value, options) {
  var queryKey = getPrefixedKey(key, options);
  var json;
  var values = smembers(key);

  if (values.indexOf(value) > -1) {
    return false;
  }

  try {
    values.push(value);
    json = JSON.stringify({
      data: values
    });
    localStorage.setItem(queryKey, json);
  } catch (e) {
    console.log(e);
    if (console) console.warn("Lockr didn't successfully add the " + value + ' to ' + key + ' set, because the localStorage is full.');
  }

  return true;
}

function rm(key, options) {
  var queryKey = getPrefixedKey(key, options);
  return localStorage.removeItem(queryKey);
}

function get(key, missing, options) {
  var queryKey = getPrefixedKey(key, options);
  var value;
  var localValue = localStorage.getItem(queryKey);

  try {
    if (localValue !== null) {
      value = JSON.parse(localValue);
    }
  } catch (e) {
    if (localStorage[queryKey]) {
      value = {
        data: localStorage.getItem(queryKey)
      };
    } else {
      value = null;
    }
  }

  if (!value) {
    return missing;
  } else if (typeof value === 'object' && typeof value.data !== 'undefined') {
    return value.data;
  }
}

function keys() {
  var prefix = getPrefix();
  var keys = [];
  var allKeys = Object.keys(localStorage);

  if (!hasPrefix()) {
    return allKeys;
  }

  allKeys.forEach(function (key) {
    if (key.indexOf(prefix) !== -1) {
      keys.push(key.replace(prefix, ''));
    }
  });
  return keys;
}

function getAll(includeKeys) {
  var keys$1 = keys();

  if (includeKeys) {
    return keys$1.reduce(function (accum, key) {
      var tempObj = {};
      tempObj[key] = get(key);
      accum.push(tempObj);
      return accum;
    }, []);
  }

  return keys$1.map(function (key) {
    return get(key);
  });
}

function flush() {
  if (getPrefix.length > 0) {
    keys().forEach(function (key) {
      localStorage.removeItem(getPrefixedKey(key));
    });
  } else {
    localStorage.clear();
  }
}

function sismember(key, value) {
  return smembers(key).indexOf(value) > -1;
}

function srem(key, value, options) {
  var queryKey = getPrefixedKey(key, options);
  var values = smembers(key, value);
  var index = values.indexOf(value);

  if (index > -1) {
    values.splice(index, 1);
  }

  var json = JSON.stringify({
    data: values
  });

  try {
    localStorage.setItem(queryKey, json);
  } catch (e) {
    if (console) console.warn("Lockr couldn't remove the " + value + ' from the set ' + key);
  }
}

exports.flush = flush;
exports.get = get;
exports.getAll = getAll;
exports.getPrefix = getPrefix;
exports.getPrefixedKey = getPrefixedKey;
exports.hasPrefix = hasPrefix;
exports.keys = keys;
exports.rm = rm;
exports.sadd = sadd;
exports.set = set;
exports.setPrefix = setPrefix;
exports.sismember = sismember;
exports.smembers = smembers;
exports.srem = srem;
//# sourceMappingURL=lockr.cjs.development.js.map
