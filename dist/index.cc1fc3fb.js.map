{"mappings":"AAIA,IAAMA,KAAOC,SAASC,eAAe,gBACjCC,WAAaF,SAASC,eAAe,kBACrCE,YAAcH,SAASC,eAAe,gBACpCG,eAAiBJ,SAASC,eAAe,uBAEzCI,UAAYL,SAASC,eAAe,aACpCK,aAAeN,SAASC,eAAe,gBACvCM,uBAAyBP,SAASC,eAAe,2BACjDO,wBAA0BR,SAASC,eAAe,4BAClDQ,cAAgBT,SAASC,eAAe,iBAE1CS,SAAWV,SAASC,eAAe,YAEnCU,cAAgB,GAgCpB,SAASC,aAETC,OAAOC,iBAAiB,QAAQ,eAuChC,SAASC,QAAQC,EAAWC,EAASC,EAAmBC,EAAoBC,EAAgBC,GAC1F,IACIC,GADI,IAAIC,MACQC,cAEhBC,EAAO,CAETC,GAAIH,KAAKI,MAETX,UAAAA,EACAC,QAAAA,EACAK,YAAAA,EACAJ,kBAAAA,EACAC,mBAAAA,EACAC,eAAAA,EACAC,iBAAAA,GAEFV,cAAciB,KAAKH,GAGjBI,QAAQC,IAAInB,eAEdoB,WAAWN,GAUb,SAASM,WAAWC,GAElB,IAAIC,EAAOjC,SAASkC,cAAc,MAClCD,EAAKE,aAAa,UAAWH,EAAKN,IAClCO,EAAKG,UAAY,MAAQJ,EAAKhB,UAAY,OAG1CN,SAAS2B,YAAYJ,GAGrB,IAAIK,EAAYtC,SAASkC,cAAc,UACnCK,EAAgBvC,SAASwC,eAAe,eAC5CF,EAAUD,YAAYE,GACtBN,EAAKI,YAAYC,GAGjBA,EAAUxB,iBAAiB,SAAS,SAAS2B,GAC3CA,EAAMC,iBACN,IAAIhB,EAAKe,EAAME,OAAOC,cAAcC,aAAa,WAC7CC,EAAQnC,cAAcoC,WAAU,SAAAtB,UAAQA,EAAKC,KAAOsB,OAAOtB,MAC/DuB,oBAAoBtC,cAAcmC,GAClCb,EAAKiB,YAIPnD,KAAKoD,QAIP,SAASF,oBAAoBG,EAAKN,GAIhC,OAHIA,GAAQ,GACVM,EAAIC,OAAOP,EAAO,GAEbM,EAtITE,MAAMC,OAAS,SAYfvD,SAASc,iBAAiB,oBAAoB,WAC5Ce,QAAQC,IAAI,QAER0B,aAAaC,OAAS,IAGxBH,MAAMI,IAAI,eACV,CAAC,QAAS,aAAc,OAAO,WAE/B7B,QAAQC,IAAIwB,MAAMK,IAAI,2BA0B1BzD,WAAWY,iBAAiB,SAAS,WACnCX,YAAYyD,MAAMC,QAAU,UAG9BzD,eAAeU,iBAAiB,SAAS,WACvCf,KAAKoD,QACLhD,YAAYyD,MAAMC,QAAU,UAI9B9D,KAAKe,iBAAiB,UAAU,SAAS2B,GACvCA,EAAMC,iBAQN3B,QAPWV,UAAUyD,MACPxD,aAAawD,MACHvD,uBAAuBuD,MACtBtD,wBAAwBsD,MAC5BrD,cAAcsD,QAAQtD,cAAcuD,eAAeF,OAGM","sources":["public/script.js"],"sourcesContent":["// Variables\r\n\r\n// DOM variable setups\r\n// Taskadd form\r\nconst form = document.getElementById(\"taskadd-form\");\r\nvar taskAddBtn = document.getElementById(\"taskadd-button\");\r\nvar taskAddForm = document.getElementById(\"taskadd-form\");\r\n  var taskAddCnclBtn = document.getElementById(\"taskadd-form-cancel\");\r\n  // Taskadd data inputs\r\n  var taskInput = document.getElementById(\"taskInput\");\r\n  var dueDateInput = document.getElementById(\"dueDateInput\");\r\n  var estimatedTimeInputMins = document.getElementById(\"estimatedTimeInput-Mins\");\r\n  var estimatedTimeInputHours = document.getElementById(\"estimatedTimeInput-Hours\");\r\n  var priorityInput = document.getElementById(\"priorityInput\");\r\n\r\nvar taskList = document.getElementById(\"tasklist\");\r\n\r\nvar taskListArray = [];\r\n\r\n// Initialise Lockr for LocalStorage functions\r\nLockr.prefix = 'lockr/';\r\n\r\n/////////////////////////\r\n// Handling on page load functions\r\n// - Try to see if user already has tasks in local storage\r\n//   - If so, render kanban board from storage\r\n//   - If not, \r\n/////////////////////////\r\n\r\n// Local storage check, populate with default keys if not already existing\r\n\r\n// ... called when initial HTML has been completely loaded and parsed\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n  console.log(\"test\");\r\n  // If local storage isn't empty\r\n  if (localStorage.length > 0) {\r\n    // Set default board setup:\r\n    // - local storage array for kanban board layout\r\n    Lockr.set('kanban_board',\r\n    ['To-do', 'In-progess', 'Done','Future']\r\n    );\r\n    console.log(Lockr.get('lockr/kanban_board'));\r\n  } else {  // If local storage has content\r\n    // \r\n    \r\n  }\r\n});\r\n\r\n\r\nfunction initKanban(){\r\n// Called when page has been completely loaded\r\nwindow.addEventListener(\"load\", function() {\r\n\r\n});\r\n};\r\n\r\n\r\n\r\n\r\n/////////////////////////\r\n// Handling task add functions\r\n// - EventListeners for form buttons\r\n// - Taskadd form sends values to the taskListArray[]\r\n// - Renders a new task in the board (REWRITE NEEDED)\r\n/////////////////////////\r\n\r\n// On task add button click, reveal task add form\r\ntaskAddBtn.addEventListener(\"click\", function(){\r\n  taskAddForm.style.display = \"flex\";\r\n});\r\n// On task add cancel button click, reset form and hide it\r\ntaskAddCnclBtn.addEventListener(\"click\", function(){\r\n  form.reset();\r\n  taskAddForm.style.display = \"none\";\r\n});\r\n\r\n// On submit button click\r\nform.addEventListener(\"submit\", function(event){\r\n  event.preventDefault();\r\n  let task = taskInput.value;\r\n  let dueDate = dueDateInput.value;\r\n  let estimatedTimeMins = estimatedTimeInputMins.value;\r\n  let estimatedTimeHours = estimatedTimeInputHours.value;\r\n  let priorityRating = priorityInput.options[priorityInput.selectedIndex].value;\r\n  \r\n  // Call addTask() - add recorded task elements to GUI list and array\r\n  addTask(task, dueDate, estimatedTimeMins, estimatedTimeHours, priorityRating, false);\r\n});\r\n\r\n// Push new task to array, render on client\r\nfunction addTask(taskTitle, dueDate, estimatedTimeMins, estimatedTimeHours, priorityRating, completionStatus) {\r\n  let d = new Date();\r\n  let dateCreated = d.getFullYear();\r\n\r\n  let task = {\r\n    // Assign unique id to task\r\n    id: Date.now(), \r\n    // User datapoints\r\n    taskTitle,\r\n    dueDate,\r\n    dateCreated,\r\n    estimatedTimeMins,\r\n    estimatedTimeHours,\r\n    priorityRating,\r\n    completionStatus\r\n  };\r\n  taskListArray.push(task);\r\n  \r\n  // DEV: log array list\r\n    console.log(taskListArray);\r\n  \r\n  renderTask(task);\r\n};\r\n\r\n/////////////////////////\r\n// Handling general kanban render functionality\r\n// - \r\n/////////////////////////\r\n\r\n// Add the new task to the html, with DOM\r\n// DEV: NEEDS REWRITE FOR KANBAN BOARD\r\nfunction renderTask(task){\r\n  // Create HTML elements\r\n  let item = document.createElement(\"li\");\r\n  item.setAttribute('data-id', task.id);\r\n  item.innerHTML = \"<p>\" + task.taskTitle + \"</p>\";\r\n\r\n  // Append new item to task list on the document\r\n  taskList.appendChild(item);\r\n\r\n  // Extra Task DOM elements\r\n  let delButton = document.createElement(\"button\");\r\n  let delButtonText = document.createTextNode(\"Delete Task\");\r\n  delButton.appendChild(delButtonText);\r\n  item.appendChild(delButton);\r\n\r\n  // Event Listeners for DOM elements\r\n  delButton.addEventListener(\"click\", function(event){\r\n    event.preventDefault();\r\n    let id = event.target.parentElement.getAttribute('data-id');\r\n    let index = taskListArray.findIndex(task => task.id === Number(id));\r\n    removeItemFromArray(taskListArray,index);\r\n    item.remove();\r\n  });\r\n\r\n  // Clear the input form\r\n  form.reset();\r\n}\r\n\r\n// Remove deleted task from array\r\nfunction removeItemFromArray(arr, index) {\r\n  if (index > -1){\r\n    arr.splice(index, 1);\r\n  }\r\n  return arr;\r\n}"],"names":["form","document","getElementById","taskAddBtn","taskAddForm","taskAddCnclBtn","taskInput","dueDateInput","estimatedTimeInputMins","estimatedTimeInputHours","priorityInput","taskList","taskListArray","initKanban","window","addEventListener","addTask","taskTitle","dueDate","estimatedTimeMins","estimatedTimeHours","priorityRating","completionStatus","dateCreated","Date","getFullYear","task","id","now","push","console","log","renderTask","task1","item","createElement","setAttribute","innerHTML","appendChild","delButton","delButtonText","createTextNode","event","preventDefault","target","parentElement","getAttribute","index","findIndex","Number","removeItemFromArray","remove","reset","arr","splice","Lockr","prefix","localStorage","length","set","get","style","display","value","options","selectedIndex"],"version":3,"file":"index.cc1fc3fb.js.map"}